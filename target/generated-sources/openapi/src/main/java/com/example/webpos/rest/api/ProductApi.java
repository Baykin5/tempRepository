/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.webpos.rest.api;

import com.example.webpos.rest.dto.ErrorDto;
import com.example.webpos.rest.dto.ProductDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-27T22:23:35.437517400+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "product", description = "the product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /product : Create a Product
     * Creates a product .
     *
     * @param productDto The product (required)
     * @return Product created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Product not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Create a Product",
        description = "Creates a product .",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> addProduct(
        @Parameter(name = "ProductDto", description = "The product", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /product/{productId} : Delete a product by ID
     *
     * @param productId The ID of the product. (required)
     * @return product details found and returned. (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete a product by ID",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "product details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> deleteProduct(
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product/{productId} : Get a product by ID
     * Returns the product or a 404 error.
     *
     * @param productId The ID of the product. (required)
     * @return product details found and returned. (status code 200)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Get a product by ID",
        description = "Returns the product or a 404 error.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "product details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/{productId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> getProduct(
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product : Lists products
     * Returns an array of products.
     *
     * @return Products found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "listProducts",
        summary = "Lists products",
        description = "Returns an array of products.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Products found and returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductDto.class)))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDto>> listProducts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }, { \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /product/{productId} : Partial update a product by ID
     * Returns the product or a 404 error.
     *
     * @param productId The ID of the product. (required)
     * @param productDto Partial update of the product (required)
     * @return product details found and returned. (status code 200)
     */
    @Operation(
        operationId = "updatePartialProduct",
        summary = "Partial update a product by ID",
        description = "Returns the product or a 404 error.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "product details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/product/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> updatePartialProduct(
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId,
        @Parameter(name = "ProductDto", description = "Partial update of the product", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /product/{productId} : Update a product by ID
     * Returns the product or a 404 error.
     *
     * @param productId The ID of the product. (required)
     * @param productDto The product (required)
     * @return product details found and returned. (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update a product by ID",
        description = "Returns the product or a 404 error.",
        tags = { "product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "product details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/product/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductDto> updateProduct(
        @Parameter(name = "productId", description = "The ID of the product.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId,
        @Parameter(name = "ProductDto", description = "The product", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"img\" : \"img\", \"quantity\" : 0, \"price\" : \"\", \"name\" : \"name\", \"id\" : \"id\", \"category\" : \"category\", \"stock\" : 6, \"tid\" : \"tid\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
