openapi: "3.0.0"
info:
  version: 1.0.0
  title: Products
  license:
    name: MIT
paths:
  /product:
    get:
      tags:
        - product
      operationId: listProducts
      summary: Lists products
      description: Returns an array of products.
      responses:
        200:
          description: Products found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - product
      operationId: addProduct
      summary: Create a Product
      description: Creates a product .
      requestBody:
        description: The product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Product created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product/{productId}:
    get:
      tags:
        - product
      operationId: getProduct
      summary: Get a product by ID
      description: Returns the product or a 404 error.
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: string
      responses:
        200:
          description: product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - product
      operationId: updateProduct
      summary: Update a product by ID
      description: Returns the product or a 404 error.
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: string
      requestBody:
        description: The product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - product
      operationId: deleteProduct
      summary: Delete a product by ID
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: string
      responses:
        200:
          description: product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      tags:
        - product
      operationId: updatePartialProduct
      summary: Partial update a product by ID
      description: Returns the product or a 404 error.
      parameters:
        - name: productId
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: string
      requestBody:
        description: Partial update of the product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
              # type: object
              # properties:
              #   quantity:
              #     type: integer
      responses:
        200:
          description: product details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'


components:
  schemas:
    Product:
      title: Product
      description: A product.
      type: object
      properties:
        id:
          title: ID
          description: The ID of the product.
          type: string
        tid:
          title: tid
          type: string
        price:
          title: Price
          description: The price of the product.
          type: double
        category:
          title: Category
          type: string
        quantity:
          title: Quantity
          type: integer
        name:
          title: Name
          description: The name of the product.
          type: string
        stock:
          title: Stock
          type: integer
        img:
          title: Image
          description: The image of the product.
          type: string
      required:
        - id
        - tid
        - price
        - img
        - category
        - name
        - quantity
        - stock
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string